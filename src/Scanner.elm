--module Scanner exposing (..)
--
--import Token exposing (TokenType)
--
--import Dict exposing (Dict)
--import List exposing (..)
--import Token exposing (Token)
--import Html exposing (input)
--import Html.Attributes exposing (default)
--
--scan : String -> List Token
--scan input = []
--
--
--scan_ : List Token -> Position -> List Char -> List Token
--scan_ tokens pos input =
--  case input of
--    [] -> reverse tokens
--    c::cs ->
--      case c of
--        '!' ->
--          case cs of
--            '='::css -> scan_ (createToken pos "!=" Token.BANG_EQUAL)::tokens (advanceCol 2 pos) css
--            default -> scan_ (createToken pos "!" Token.BANG)::tokens (advanceCol 1 pos) cs
--        '(' -> scan_ (createToken pos "(" Token.LEFT_PAREN)::tokens (advanceCol 1 pos) cs
--        ' ' -> scan_ tokens (advanceCol 1 pos) cs
--        '\n' -> scan_ tokens (advanceLine 1 pos) cs
--        '"' ->
--          case consumeString cs of
--            Just s ->
--              let nCols = length s in
--                (createToken pos s Token.STRING)::tokens (advanceCol nCols pos) (drop nCols)
--            Nothing -> []  -- error
--        default ->
--          if isNumber c then
--            let
--              s = c ++ (consumeNumber cs)
--              nCols = length num
--            in
--              scan_ (createToken pos s Token.NUMBER)::tokens (advanceCol nCols pos) (drop nCols)
--          else if isAlpha c then
--            let
--              s = c ++ (consumeAlphaNum cs)
--              nCols = length num
--            in
--              scan_ (createToken pos s Token.IDENTIFIER)::tokens (advanceCol nCols pos) (drop nCols)
--          else []
--
--
--
--
--
--type alias Position =
--  { line : Int
--  , column : Int
--  }
--
--advanceCol : Int -> Position -> Position
--advanceCol n pos =
--  { pos | column = pos.column + n}
--
--advanceLine : Int -> Position -> Position
--advanceLine n pos =
--  { pos | line = pos.line + n}
--
--keywords : Dict String TokenType
--keywords =
--  Dict.fromList
--    [ ("and",   Token.AND)
--    , ("class", Token.CLASS)
--    , ("else",  Token.ELSE)
--    , ("false", Token.FALSE)
--    , ("for",   Token.FOR)
--    , ("fun",   Token.FUN)
--    , ("if",    Token.IF)
--    , ("nil",   Token.NIL)
--    , ("or",    Token.OR)
--    , ("print", Token.PRINT)
--    , ("return",Token.RETURN)
--    , ("super", Token.SUPER)
--    , ("this",  Token.THIS)
--    , ("true",  Token.TRUE)
--    , ("var",   Token.VAR)
--    , ("while", Token.WHILE)
--    , ("break", Token.BREAK)
--    ]